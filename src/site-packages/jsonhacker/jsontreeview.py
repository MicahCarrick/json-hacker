from gi.repository import GObject, Gtk, GdkPixbuf
import os
import json
import logging
import types

class JsonTreeView(Gtk.TreeView):
    def __init__(self, *args, **kwargs):
        Gtk.TreeView.__init__(self)
        self.logger = logging.getLogger(self.__class__.__name__)
        model = Gtk.TreeStore(GdkPixbuf.Pixbuf,       # icon
                              GObject.TYPE_STRING,    # name
                              GObject.TYPE_STRING,    # value
                              GObject.TYPE_STRING)    # type             
        self.set_model(model)
        self.set_rules_hint(True)          
        column = Gtk.TreeViewColumn("Name")
        cell = Gtk.CellRendererPixbuf()
        column.pack_start(cell, False)
        column.add_attribute(cell, 'pixbuf', 0)
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, 'text', 1)
        self.append_column(column)
        
        column = Gtk.TreeViewColumn("Value")
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, 'text', 2)
        self.append_column(column)
        
        column = Gtk.TreeViewColumn("Type")
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, 'text', 3)
        self.append_column(column)
        
        self.icons = {}
        for type_name in ['string', 'number', 'object', 'array', 'null', 'boolean']:
            try:
                filename = os.path.join(kwargs['icon_dir'], "json-{0}.png".format(type_name))
                self.icons[type_name] = GdkPixbuf.Pixbuf.new_from_file(filename)
            except Exception as e:
                self.logger.debug(str(e))
                self.icons[type_name] = None

    def _add_node(self, key, value, parent_iter=None):
        model = self.get_model()

        if type(value) in (types.StringType, types.UnicodeType):
            model.append(parent_iter, (self.icons['string'], key, value, 'string'))
        elif type(value) in (types.IntType, types.FloatType, types.LongType):
            model.append(parent_iter, (self.icons['number'], key, str(value), 'number'))
        elif type(value) == types.BooleanType:
            model.append(parent_iter, (self.icons['boolean'], key, str(value).lower(), 'boolean'))
        elif type(value) == types.NoneType:
            model.append(parent_iter, (self.icons['null'], key, '(null)', 'null'))
        elif type(value) == types.DictType:
            child_iter = model.append(parent_iter, (self.icons['object'], key, None, 'object'))
            for child_key, child_value in value.iteritems():
                self._add_node(child_key, child_value, child_iter)
        elif type(value) == types.ListType:
            child_iter = model.append(parent_iter, (self.icons['array'], key, None, 'array'))
            for child_key, child_value in enumerate(value):
                self._add_node(str(child_key), child_value, child_iter)
        
            
            
    def load(self, json_string):
        json_data = json.loads(json_string)
        for key, value in json_data.iteritems():
            self._add_node(key, value)
            
