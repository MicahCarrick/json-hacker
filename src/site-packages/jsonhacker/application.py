from __future__ import print_function
from gi.repository import Gtk, Gio, GObject
from jsonhacker import Window

import logging

MENU_XML = """
<interface>
  <menu id='app-menu'>
    <section>
      <item>
        <attribute name='label' translatable='yes'>_New Window</attribute>
        <attribute name='action'>app.new</attribute>
        <attribute name='accel'>&lt;Primary&gt;n</attribute>
      </item>
    </section>
    <section>
      <item>
        <attribute name='label' translatable='yes'>_Quit</attribute>
        <attribute name='action'>app.quit</attribute>
        <attribute name='accel'>&lt;Primary&gt;q</attribute>
      </item>
    </section>
  </menu>
  <menu id='menubar'>
    <submenu>
      <attribute name='label' translatable='yes'>_Edit</attribute>
      <section>
        <item>
          <attribute name='label' translatable='yes'>_Copy</attribute>
          <attribute name='action'>win.copy</attribute>
          <attribute name='accel'>&lt;Primary&gt;c</attribute>
        </item>
        <item>
          <attribute name='label' translatable='yes'>_Paste</attribute>
          <attribute name='action'>win.paste</attribute>
          <attribute name='accel'>&lt;Primary&gt;v</attribute>
        </item>
      </section>
    </submenu>
  </menu>
</interface>
"""

class Application(Gtk.Application):
    @GObject.property
    def datadir(self):
        return self._datadir
        
    @GObject.property
    def package(self):
        return self._package
    
    @GObject.property
    def package_name(self):
        return self._package_name
    
    @GObject.property
    def version(self):
        return self._version
        
    def __init__(self, **kwargs):
        self.logger = logging.getLogger(self.__class__.__name__)
        Gtk.Application.__init__(self, 
                                 application_id="com.micahcarrick.json-hacker",
                                 #flags=Gio.ApplicationFlags.HANDLES_OPEN,
                                 #inactivity_timeout=30000,
                                 register_session=True)
        
        # autotools keyword arguments passed in by the run script
        for key in kwargs:
            self.logger.debug("{0}={1}".format(key, kwargs[key]))
            setattr(self, '_' + key, kwargs[key])
        
        self.connect("startup", self.startup)     
        self.connect("activate", self.activate)
        #self.connect("open", self.open)

    def about_activated(self, action, data=None):
        dialog = Gtk.AboutDialog(program_name="JSON Hacker",
                                 title="About JSON Hacker",
                                 comments="A GTK+ based JSON editor.")
        dialog.run()
        dialog.destroy()

    def new_window(self, filename=None):
        window = Window(self, filename)
        window.show()

    def open(self, application, files, n_files, hint):
        for giofile in files:
            self.new_window(self, giofile)

    def activate(self, data=None):
        self.logger.debug("activate()")
        self.new_window()
        
    def startup(self, data=None):
        self.logger.debug("startup()")
        # Add_action_entries() not yet available in Python.
        # See bug: https://bugzilla.gnome.org/show_bug.cgi?id=678655
        """
        entries = [
            ("new", lambda a,b: self.activate()),
            ("about", self.about_activated),
            ("quit", lambda a,b: self.quit()),
        ]
        
        self.add_action_entries(entries)
        """        
        action = Gio.SimpleAction(name="quit")
        action.connect("activate", lambda a,b: self.quit())
        self.add_action(action)
        
        action = Gio.SimpleAction(name="new")
        action.connect("activate", lambda a,b: self.activate())
        self.add_action(action)
        
        builder = Gtk.Builder()
        builder.add_from_string(MENU_XML)
        self.set_menubar(builder.get_object("menubar"))
        self.set_app_menu(builder.get_object("app-menu"))
            

